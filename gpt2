import math
import torch
import tiktoken
import torch.nn as nn
import torch.nn.functional as F

device = 'cpu'
if torch.cuda.is_available():
    device = 'cuda'

# 构建自定义分词器
data_dir = 'data.txt'
text = open(data_dir, 'r').read()
tokenizer = tiktoken.get_encoding('gpt2')
vocab_size = tokenizer.n_vocab

data = torch.tensor(tokenizer.encode(text), dtype=torch.long, device=device)  # torch.long相当于python中的int64

# 构建数据加载器
class Dataloader:
    def __init__(self, tokens, batch_size, context_length):
        self.tokens = tokens
        self.batch_size = batch_size
        self.context_length = context_length

        self.current_position = 0
    
    def get_batch(self):  # 所有批次的上下文序列长度之和
        b, c = self.batch_size, self.context_length

        strat_pos = self.current_position  # 0
        end_pos = self.current_position + b * c + 1  # 4097
        add_data = -1
        if end_pos > len(self.tokens):  # 结束位置超过总长度时  4097>156
            add_data = end_pos - len(self.tokens)  # 计算超出量，-1以适应索引  4097-156-1  3940
            end_pos = len(self.tokens)  # 重新设定结束位置  155
        
        d = self.tokens[strat_pos:end_pos]  # d = [0, b * c - 1]  0, 155 = 155  shape=(155,)
        if add_data != -1:  # 进入
            d = torch.cat([d, self.tokens[:add_data]])  # 拼接操作  (155, 0)+(3939, 0)=4094
        x = (d[:-1]).view(b, c)  # 输入
        y = (d[1:]).view(b, c)  # 目标，用于预测

        self.current_position += b * c
        if self.current_position >= len(self.tokens):
            self.current_position = 0
        return x, y

train_batch_size = 16  # 训练集批大小
eval_batch_size = 8  # 测试集批大小
context_length = 256  # seq_len 每一批次的序列长度，此处为上下文长度
train_split = 0.7  # 用于训练的总数据百分比，也就是8成数据用于训练，剩下的用于测试

n_data = len(data)  # 数据集大小   232724
train_data = data[:int(n_data * train_split)]
eval_data = data[int(n_data * train_split):]
print(f'{n_data}\n{train_data}\n{eval_data}')

train_loader = Dataloader(train_data, train_batch_size, context_length)
eval_loader = Dataloader(eval_data, eval_batch_size, context_length)

# 构建GPT模型
# 位置编码
class Positional_Encoding(nn.Module):
    def __init__(self, context_length, d_model):
        super(Positional_Encoding, self).__init__()
        pe = torch.zeros(context_length, d_model)
        position = torch.arange(0, context_length, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))

        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0)
        self.register_buffer('pe', pe)
    
    def forward(self, x):
        return x + self.pe[:, :x.size(1), :]

# 自注意力
# class Self_Attention(nn.Module):
#     def __init__(self, d_model, dropout=0.2):
#         super(Self_Attention, self).__init__()
#         self.query = nn.Linear(d_model, d_model)
#         self.key = nn.Linear(d_model, d_model)
#         self.value = nn.Linear(d_model, d_model)
#         self.fc_out = nn.Linear(d_model, d_model)
#         self.dropout = nn.Dropout(dropout)
    
#     def forward(self, inputs):
#         _, seq_length, _ = inputs.shape

#         query = self.query(inputs)
#         key = self.key(inputs)
#         value = self.value(inputs)

#         attention_scores = torch.matmul(query, key.transpose(-2, -1))

#         mask = torch.triu(torch.ones(seq_length, seq_length), diagonal=1).bool().to(inputs.device)
#         attention_scores = attention_scores.masked_fill(mask, float('-inf'))

#         attention_weights = torch.softmax(attention_scores, dim=-1)
#         attention_out = torch.matmul(attention_weights, value)
#         out = self.fc_out(attention_out)
#         return out

# 多头注意力
class MultiHead_Attention(nn.Module):
    def __init__(self, d_model, num_heads, dropout=0.2):
        super(MultiHead_Attention, self).__init__()
        self.d_model = d_model
        self.num_heads = num_heads
        self.head_dim = d_model // num_heads

        assert (num_heads * self.head_dim == d_model)

        self.query = nn.Linear(d_model, d_model)
        self.key = nn.Linear(d_model, d_model)
        self.value = nn.Linear(d_model, d_model)
        self.fc_out = nn.Linear(d_model, d_model)
        self.dropout = nn.Dropout(dropout)
    
    def forward(self, inputs):
        batch_size, seq_length, d_model = inputs.shape

        query = self.query(inputs).view(batch_size, seq_length, self.num_heads, self.head_dim).permute(0, 2, 1, 3)
        key = self.key(inputs).view(batch_size, seq_length, self.num_heads, self.head_dim).permute(0, 2, 1, 3)
        value = self.value(inputs).view(batch_size, seq_length, self.num_heads, self.head_dim).permute(0, 2, 1, 3)

        attention_scores = torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(self.head_dim)

        mask = torch.triu(torch.ones(seq_length, seq_length),diagonal=1).bool().to(inputs.device)
        attention_scores = attention_scores.masked_fill(mask, float('-inf'))

        attention_weights = torch.softmax(attention_scores, dim=-1)
        attention_out = torch.matmul(attention_weights, value).permute(0, 2, 1, 3).contiguous().view(batch_size, seq_length, d_model)

        out = self.fc_out(attention_out)
        return out

# 解码器
class GPTBlock(nn.Module):
    def __init__(self, d_model, num_heads, dropout=0.2):
        super(GPTBlock, self).__init__()
        self.att = MultiHead_Attention(d_model, num_heads)
        self.ln1 = nn.LayerNorm(d_model)
        self.ln2 = nn.LayerNorm(d_model)
        self.dropout = nn.Dropout(dropout)
        self.fcn = nn.Sequential(
            nn.Linear(d_model, 4 * d_model),
            nn.ReLU(),
            nn.Linear(4 * d_model, d_model)
        )
    
    def forward(self, logits):
        att_logits = self.att(logits)
        adn_logits = self.ln1(logits + att_logits)
        logits = self.dropout(adn_logits)
        logits = self.fcn(logits)
        logits = self.ln2(logits + adn_logits)
        return logits
    
# GPT
class GPT(nn.Module):
    def __init__(self, vocab_size, d_model, num_heads, n_layers, dropout=0.2):
        super(GPT, self).__init__()
        self.wte = nn.Embedding(vocab_size, d_model)
        self.wpe = Positional_Encoding(context_length, d_model)
        self.blocks = nn.ModuleList([GPTBlock(d_model, num_heads) for _ in range(n_layers)])
        self.linear1 = nn.Linear(d_model, vocab_size)
    
    def forward(self, inputs, targets=None):  # targets=>真值
        logits = self.wte(inputs)
        logits = self.wpe(logits)
        for block in self.blocks:
            logits = block(logits)
        logits = self.linear1(logits) 

        loss = None
        if targets is not None:
            batch_size, sequence_length, d_model = logits.shape
            logits = logits.view(batch_size * sequence_length, d_model)
            targets = targets.view(batch_size * sequence_length)
            loss = F.cross_entropy(logits, targets)  # cross_entropy 交叉熵损失函数
        return logits, loss
    
    def generate(self, inputs, max_new_tokens):  # max_new_tokens相当于BPE中的词表大小
        output = inputs.clone()  # 创建副本
        for _ in range(max_new_tokens):
            current_seq_length = inputs.size(1)
            if current_seq_length > context_length:
                inputs = inputs[:, -context_length:]

            logits, _ = self(inputs)  # self被调用->__call__被调用(在nn.Module中如此设置)->forward被调用
            logits = logits[:, -1, :]
            probs = F.softmax(logits, dim=1)
            idx_next = torch.multinomial(probs, num_samples=1)  # torch.multinomial 随机取样函数
            inputs = torch.cat([inputs, idx_next], dim=1)

            output = torch.cat([output, idx_next], dim=1)
        return [tokenizer.decode(out.tolist()) for out in output]

d_model = 512
n_layers = 2
num_heads = 4
m = GPT(vocab_size, d_model, num_heads, n_layers).to(device)
m = torch.compile(m)

lr = 1e-3
optim = torch.optim.AdamW(m.parameters(), lr=lr)
epochs = 1000
eval_step = 500
n_ = 0
for ep in range(epochs):
    xb, yb = train_loader.get_batch()
    logits, loss = m(xb, yb)
    optim.zero_grad(set_to_none=True)  # 梯度清零
    loss.backward()
    optim.step()

    if ep % eval_step == 0 or ep == epochs - 1:
        m.eval()
        with torch.no_grad():  # 关闭梯度
            xvb, yvb = eval_loader.get_batch()
            _, e_loss = m(xvb, yvb)

            print(f'Epochs: {ep}\tlr: {lr}\ttrain_loss: {loss:.4f}\teval_loss: {e_loss:.4f}')
        m.train()

with torch.no_grad():
    inputs = torch.tensor(tokenizer.encode('love'), dtype=torch.long, device=device).unsqueeze(0)
    generated_text = m.generate(inputs, max_new_tokens=50)[0]
    print(generated_text)
